#lang racket
(define (expt-r b n)
  (if (= n 0)
      1
      (* b (expt-r b (- n 1)))))

(define (expt-i b n)
  (define (my-expt-i b curr n val)
    (if (= curr n)
      val
      (my-expt-i b (+ curr 1) n (* b val))))
  (cond ((< n 0) (/ 1.0 (expt-i b (- n))))
        (else (my-expt-i b 0 n 1))))

(define (fast-exp b n)
  (cond
    ((= n 0) 1)
    ((even? n) (fast-exp (sqr b) (/ n 2)))
    (else (* b (fast-exp b (- n 1))))))

  
  