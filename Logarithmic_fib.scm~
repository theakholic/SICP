#lang racket
; T_pq : a,b -> bq + a(p+q), bp + aq
; (T_pq)^2 = T_(p^2+q^2)(q^2+2pq)
(define (sum-of-squares x y)
  (+ (sqr x) (+ sqr y)))

(define (T-pq-a p q a b) 
  (+ (* b q) (* a q) (* a p)))

(define (T-pq-b p q a b)
  (+ (* b p) (* a q)))

(define (T-pq-square-a p q a b)
  (T-pq-a (sum-of-squares p q) (+ (sqr q) (* 2 p q)) a b))

(define (T-pq-square-b p q a b)
  (T-pq-b (sum-of-squares p q) (+ (sqr q) (* 2 p q)) a b))

(define (Fib-func_a curr next);Generate Fib(CURR+1)
  (T-pq-a 0 1 curr next))

(define (Fib-func-b curr next)
  (T-pq-b 0 1 curr next))

(define (fib-square-a curr next)
  (T-pq-square-a 0 1 curr next))

(define (fib-square-b curr next)
  (T-pq-square-b 0 1 curr next))


(define (fast-fib n) ;Calculate the nth fibonacci number in O(log n)
  (define (my-fast-fib m a b)
    (cond ((= m 0) b)
          ((even? m) (my-fast-fib (/ m 2) (fib-square-a a b) (fib-square-b a b)))
          (else (my-fast-fib (- m 1) (Fib-func-a a b) (Fib-func-b a b)))))
  (my-fast-fib n 1 0));Generate the nth fib
  