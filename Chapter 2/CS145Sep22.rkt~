#lang racket


(define (make-pair x y) ; x y t1 t2 
  (cons x y))

(define (first-pair p)
  (car p))

(define (second-pair p)
  (cdr p))

(define (scale p k)
  (make-pair (* (first-pair p) k) (* (second-pair p) k)))


(define (scale-list k p)
  (if (null? p)
      '()
      (cons (* k (car p)) (scale-list k (cdr p)))))


(define (my-reduce f initial p)
  (define (reduce-f f p curr) ; reduce a list using a function f
    (if (null? p)
        curr
        (reduce-f f (cdr p) (f curr (car p)))))
  (reduce-f f p initial))

(define (sum-list p) (my-reduce + 0 p))

(define (my-filter filter? items) ;remove stuff based on filter? function
  (if  (null? items)
       items
       (if (filter? (car items))
           (my-filter filter? (cdr items))
           (cons (car items) (my-filter filter? (cdr items))))))